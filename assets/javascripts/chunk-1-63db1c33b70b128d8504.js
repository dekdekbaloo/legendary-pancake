webpackJsonp([1],{126:function(e,t,o){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function n(){return i.default.createElement("div",{className:"Docs",dangerouslySetInnerHTML:{__html:s.default}})}Object.defineProperty(t,"__esModule",{value:!0}),o(221);var r=o(145),s=a(r),l=o(5),i=a(l);t.default=n},145:function(e,t){e.exports="<h1>legendary-pancake</h1> <blockquote> <p>Great repository names are short and memorable. Need inspiration? How about <strong>legendary-pancake</strong>. —GitHub</p> </blockquote> <p><strong>legendary-pancake</strong> is an <strong>advanced</strong> static site generator based on Webpack, React and React Router. It is designed for advanced users and gives you total control of:</p> <ul> <li> <p><strong>Your site structure.</strong> Unlike <a href=https://github.com/gatsbyjs/gatsby>Gatsby</a>, it doesn’t define routes based on filesystem layout. You define all the routes programmatically.</p> </li> <li> <p><strong>How you write CSS.</strong> PostCSS? PreCSS? cssnext? Sass? LESS? Stylus? CSS Modules? Autoprefixer? Inline Styles? legendary-pancake has no preference on this.</p> </li> <li> <p><strong>The prerendering process.</strong> You decide how your React element gets turned into an HTML file.</p> <p>You can use libraries like <a href=https://github.com/gaearon/react-document-title>react-document-title</a>, <a href=https://github.com/nfl/react-helmet>react-helmet</a> to help with <code>&lt;head&gt;</code> elements, or roll your own solution.</p> <p>Inline your CSS or JS in your HTML file, or put it in another chunk. It’s all up to you.</p> </li> <li> <p><strong>Route loading.</strong> legendary-pancake has no preference on how to load your page contents. Use webpack’s <a href=https://webpack.github.io/docs/code-splitting.html>code splitting</a> or <a href=https://github.com/webpack/bundle-loader>bundle-loader</a> to load your site content asynchronously, either eagerly or on-demand.</p> <p>Split chunks by page, or group related pages together. You are in total control.</p> </li> <li> <p><strong>Your deployment process.</strong> The pages will be built in <code>build/pages</code> and other webpack assets in <code>build/browser</code>. The rest is up to you. By separating the data from the assets, this allows for some advanced use-cases, such as A/B testing a static site.</p> </li> </ul> <p>But <code>legendary-pancake</code> will take care of these for you:</p> <ul> <li> <p><strong>Development and building workflow.</strong> It comes with a CLI tool to run the development server, build webpack bundles and prerender pages.</p> </li> <li> <p><strong>Managing URLs and route transitions.</strong> legendary-pancake preconfigures React Router to support asynchronous routing and prerendering at the same time, and abstracts it away behind an API that is more suited for static routes.</p> </li> </ul> "},221:222});